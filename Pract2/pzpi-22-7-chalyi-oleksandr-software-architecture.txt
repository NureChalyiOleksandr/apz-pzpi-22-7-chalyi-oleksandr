МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
Кафедра ПІ
ЗВІТ
з практичної роботи №2 
з дисципліни «Архітектура програмного забезпечення»




Виконав:                                                                 Перевірив:
Ст. гр. ПЗПІ-22-7                                                         Ст. вик. каф. ПІ
Чалий О. О.                                                         Сокорчук І. П.
Харків 2025
1  ІСТОРІЯ ЗМІН


№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	13.06.2025
	0.1
	Створено розділ «Історія змін»
	2
	13.06.2025
	0.1
	Створено розділ «Завдання»
	3
	13.06.2025
	0.1
	Створено розділ «Опис виконаної роботи»
	4
	13.06.2025
	0.1
	Створено розділ «Висновки»
	5
	13.06.2025
	0.1
	Додано слайди презентації у додаток Б
	6
	15.06.2025
	0.1
	Додано посилання на відеозапис та хронологічний опис доповіді у додаток А


	

2 ЗАВДАННЯ
Підготувати доповідь про архітектуру однієї з відомих складних програмних систем.
3 ОПИС ВИКОНАНОЇ РОБОТИ
3.1 Вступ
У цій роботі було досліджено архітектуру Duolingo — платформи для вивчення іноземних мов, яка поєднує навчальний контент із гейміфікацією та адаптивною логікою. Встановлено, що платформа дозволяє користувачам опановувати десятки мов у форматі коротких інтерактивних вправ, при цьому використовує ігрові елементи, механізми мотивації та змагання. Попри зовнішню простоту, система має складну, гнучку й масштабовану архітектуру, яка забезпечує стабільну роботу платформи для сотень мільйонів користувачів у всьому світі.


3.2 Загальний підхід до архітектури
Проаналізовано гібридну архітектуру платформи Duolingo. Було встановлено, що основа платформи — монолітна структура, реалізована мовою Python з використанням фреймворку Django. Згодом навколо цього моноліту була побудована мікросервісна інфраструктура. Такий підхід дав змогу розподілити ключові функціональні блоки — систему вправ, модуль гейміфікації, облік прогресу, керування підписками — на окремі сервіси. Це забезпечило гнучкість, полегшення масштабування та незалежну розробку окремих компонентів без необхідності зміни всього застосунку.


3.3 Подієво-орієнтована система
Досліджено особливості подієво-орієнтованого підходу в архітектурі Duolingo. Встановлено, що взаємодія між окремими сервісами часто реалізується не напряму, а через систему черг повідомлень. Коли користувач завершує урок, ця подія передається у вигляді повідомлення, яке може активувати кілька фонових процесів — наприклад, оновлення рейтингу, надсилання нагадування чи адаптацію складності наступних вправ. Такий підхід дозволяє розподіляти логіку між сервісами, зменшувати затримки у відповіді та рівномірно розподіляти навантаження.


3.4 Надійність і fault tolerance
Було проаналізовано механізми забезпечення надійності платформи. Зокрема, критично важливі модулі, серед яких ядро навчальної системи, мають дублікати або резервні копії. У разі збою основного сервісу автоматично активуються його резервні варіанти. Така fail-safe логіка дозволяє підтримувати безперервну роботу системи навіть за умов високого навантаження або часткових відмов окремих компонентів.


3.5 A/B тестування як частина архітектури
Розглянуто роль A/B тестування у функціонуванні Duolingo. Було виявлено, що зміни в інтерфейсі, нові вправи або підходи до навчання впроваджуються через систему експериментів. Для цього використовується окремий сервіс — модуль контролю експериментів, який дозволяє одночасно тестувати десятки варіантів і збирати статистику щодо ефективності кожного з них. Це дає змогу приймати обґрунтовані рішення щодо впровадження нових функцій.


3.6 Клієнтська частина
Було досліджено технологічний стек клієнтської частини платформи. Встановлено, що вебверсія Duolingo реалізована з використанням бібліотеки React та мови TypeScript. Мобільні застосунки є нативними: Swift — для iOS, Kotlin — для Android. Для комунікації між клієнтом і сервером використовуються REST API та GraphQL, що дозволяє гнучко і ефективно отримувати лише ті дані, які потрібні для конкретного інтерфейсу.


3.7 Робота з даними
Проаналізовано підхід Duolingo до зберігання даних. Основною базою даних є PostgreSQL, яка використовується для зберігання користувацьких даних, навчального прогресу та метаданих курсів. Для оптимізації швидкості доступу до часто використовуваних (“гарячих”) даних застосовується Redis як система кешування. Мультимедійні елементи — зображення, звукові файли — зберігаються у хмарному сховищі Amazon S3, що забезпечує масштабованість і високу доступність.


3.8 Обробка подій та фонові задачі
Було розглянуто, як у Duolingo реалізовано обробку фонових задач і подій. Події передаються через брокер повідомлень RabbitMQ, а фонові задачі виконуються за допомогою фреймворку Celery. Такий підхід дозволяє масштабувати обробку фонових процесів, розділяти їх за пріоритетами та запускати асинхронно, що важливо при великій кількості одночасних користувачів.


3.9 Використання машинного навчання
У дослідженні приділено окрему увагу модулям машинного навчання. Встановлено, що вони використовуються для персоналізації контенту та прогнозування поведінки користувача. Наприклад, система добирає наступні вправи, орієнтуючись на історію навчання, а також може виявити ризик втрати інтересу до занять — і вчасно активувати відповідні втручання, як-от нагадування чи зміна темпу.


3.10 Хмарна інфраструктура
Вивчено, як побудована інфраструктура платформи у хмарному середовищі. Було встановлено, що система розгортається у середовищі AWS, а для ізоляції та масштабування використовуються Docker-контейнери. Оркестрація контейнерів здійснюється за допомогою Kubernetes. CI/CD-процеси автоматизовані через GitHub Actions та внутрішні пайплайни, що дає змогу швидко тестувати та розгортати нові версії без шкоди для основного функціоналу.


3.11 Поєднання класики й інновацій
У ході дослідження було з’ясовано, що архітектура Duolingo поєднує традиційні підходи з сучасними технологіями. Від монолітного застосунку до мікросервісної інфраструктури, від класичних алгоритмів до моделей на основі машинного навчання — усе це дозволяє створити ефективну та стійку платформу, здатну адаптуватися до вимог сучасного EdTech-середовища.


3.12 Стабільність і розвиток
Було встановлено, що Duolingo не лише забезпечує високу стабільність, але й здатна до постійного розвитку. Вдосконалення архітектури, гнучке масштабування, адаптивність і впровадження інновацій забезпечують платформі лідерство серед онлайн-сервісів для навчання мов.
3.13 Висновки
У результаті дослідження було зроблено висновок, що архітектура Duolingo є прикладом вдалого поєднання масштабованості, надійності та гнучкості. Завдяки правильно організованому розподілу відповідальності між компонентами система ефективно підтримує мільйони активних користувачів, дозволяє впроваджувати нові функції без порушення основного функціоналу та демонструє приклад сучасного підходу до розробки складних EdTech-рішень.


4 ВИСНОВКИ З РОБОТИ
У ході виконаної роботи було досліджено сучасну архітектуру платформи Duolingo. Встановлено, що її гібридна модель, fault tolerance, гнучке масштабування, подієва модель взаємодії, машинне навчання та хмарна інфраструктура забезпечують надійність і ефективність платформи. Отримані знання можуть бути використані для побудови масштабованих освітніх систем, стартапів або корпоративних платформ з високими вимогами до стабільності, персоналізації й гнучкості.
________________


ДОДАТОК А
Відеозапис доповіді на YouTube: https://youtu.be/Wubx3kJUZH4 
Хронологічний опис доповіді:
0:00 - Зміст презентації
0:08 - Вступ
0:53 - Загальний підхід до архітектури
1:40 - Подієво-орієнтована система
2:23 - Надійність і fault tolerance
3:04 - A/B тестування як частина архітектури
3:45 - Клієнтська частина
4:29 - Робота з даними
5:14 - Обробка подій та фонові задачі
5:45 - Використання машинного навчання
6:18 - Хмарна інфраструктура
6:55 - Поєднання класики й інновацій
7:28 - Стабільність і розвиток
7:51 - Висновки


________________


ДОДАТОК Б 
Слайди презентації
  

Рисунок Б.1 – Титульний слайд презентації


  

Рисунок Б.2 – Вступ
  

Рисунок Б.3 - Загальний підхід до архітектури


  

Рисунок Б.4 - Подієво-орієнтована система
  

Рисунок Б.5 - Надійність і falut tolerance


  

Рисунок Б.6 - A/B тестування як частина архітектури
  

Рисунок Б.7 - Клієнтська частина


  

Рисунок Б.8 - Робота с даними
  

Рисунок Б.9 - Обробка подій та фонові задачі


  

Рисунок Б.10 - Використання машинного навчання
  

Рисунок Б.11 - Хмарна інфраструктура


  

Рисунок Б.12 - Поєднання класики й інновацій
  

Рисунок Б.13 - Стабільність і розвиток


  

Рисунок Б.14 - Висновки